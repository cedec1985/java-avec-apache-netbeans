/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.eni.gui;

import static com.alee.extended.syntax.SyntaxPreset.java;
import java.awt.Color;
import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays; 
import java.util.stream.Collectors;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class CSVPanel extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
    public CSVPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        loadCSV = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        chooseFile = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        statisticsTable = new javax.swing.JTable();
        mValCountTitleLB = new javax.swing.JLabel();
        missingValueCountLB = new javax.swing.JLabel();
        totalLineTitleLB = new javax.swing.JLabel();
        totalLineLB = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        csvTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setMaximumSize(new java.awt.Dimension(700, 800));
        setPreferredSize(new java.awt.Dimension(700, 550));

        loadCSV.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        loadCSV.setForeground(new java.awt.Color(153, 51, 0));
        loadCSV.setText("Charger le csv");
        loadCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadCSVActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        table.setCellSelectionEnabled(true);
        jScrollPane2.setViewportView(table);
        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        chooseFile.setText("Choisir un fichier");
        chooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Statistiques"));

        statisticsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Colonne", "Valeurs Manquantes", "% V. Manquantes"
            }
        ));
        jScrollPane4.setViewportView(statisticsTable);

        mValCountTitleLB.setText("Nombre lignes Ã  valeurs Manquantes");

        missingValueCountLB.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        missingValueCountLB.setText("0");

        totalLineTitleLB.setText("Nombre lignes");

        totalLineLB.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        totalLineLB.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mValCountTitleLB)
                            .addComponent(totalLineTitleLB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(missingValueCountLB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(totalLineLB, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(9, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mValCountTitleLB)
                    .addComponent(missingValueCountLB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalLineTitleLB)
                    .addComponent(totalLineLB))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        csvTextArea.setColumns(20);
        csvTextArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        csvTextArea.setRows(5);
        csvTextArea.setToolTipText("coller le csv ou ouvrir un fichier");
        jScrollPane3.setViewportView(csvTextArea);

        jLabel1.setText("Coller du contenu CSV dans cette zone, ou choisissez un fichier");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 40, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(chooseFile, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(loadCSV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chooseFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loadCSV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void loadCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadCSVActionPerformed
        String content = this.csvTextArea.getText();

       
        DefaultTableModel contentModel = (DefaultTableModel) table.getModel();
        
        //reinit rows and columns
        contentModel.setColumnCount(0);
        contentModel.setRowCount(0);
        
        DefaultTableModel statisticsModel = (DefaultTableModel) statisticsTable.getModel();
        statisticsModel.setRowCount(0);
        //build internal model
        List<String> lines = new ArrayList<>(Arrays.asList(content.split("\\r?\\n")));
        final String headersAsString = lines.remove(0);
        //build headers
          
        
        String[] headers = headersAsString.split(",");
        MatrixValues matrix = new MatrixValues();
        matrix.setHeaders(Arrays.asList(headers));
        for (String line : lines) {
            final List<String> lineElements = Arrays.asList(line.split(","))
                    .stream()
                    .map(s -> s.replaceAll("\"", "").trim())
                    .collect(Collectors.toList());
            matrix.addRow(lineElements);
        }
        
        //build table from internal model
        matrix.getHeaders()
                .forEach(c -> contentModel.addColumn(c));
        
        matrix.getValues()
                .forEach(r -> contentModel.addRow(r.toArray()));
        
        int rowCount = matrix.getValues().size();
        matrix.countMissingValuesByHeader()
                .forEach((c,m) -> statisticsModel.addRow(new Object[]{c,m, percentage(m,rowCount)}));
        
        this.totalLineLB.setText(String.valueOf(rowCount));
        this.missingValueCountLB.setText(String.valueOf(matrix.countLinesHavingMissingValues()));
        
table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        Color color = Color.WHITE;
        for (int k = 0; k < contentModel.getColumnCount(); k++) {
            final Object cell = contentModel.getValueAt(row, k);
            if ("".equals(String.valueOf(cell))) { //detected empty value
                if (k == column) {                           
                    color = new Color(255, 205, 205);  //red
                   break;
                } else {
                    color = new Color(255, 240, 205);  //orange
                    break;
                }
            }                    
        }
        setBackground(color);
        return this;
    }
});

        table.repaint();


    }//GEN-LAST:event_loadCSVActionPerformed

    private static double percentage(Integer m, Integer total) {
        return Double.valueOf(Math.round(Double.valueOf(m)/total * 10000)) / 100;
    }

    private void chooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileActionPerformed
final JFileChooser fileChooser = new JFileChooser();
final int result = fileChooser.showOpenDialog(this);
if (result == JFileChooser.APPROVE_OPTION) {
    try {
        final File selectedFile = fileChooser.getSelectedFile();
        if (selectedFile.isFile()) {
            final String content = new String(Files.readAllBytes(selectedFile.toPath()));
            this.csvTextArea.setText(content);
        }
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this.getParent(), "Erreur Ã  la lecture du fichier " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
    }
}


    }//GEN-LAST:event_chooseFileActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseFile;
    private javax.swing.JTextArea csvTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton loadCSV;
    private javax.swing.JLabel mValCountTitleLB;
    private javax.swing.JLabel missingValueCountLB;
    private javax.swing.JTable statisticsTable;
    private javax.swing.JTable table;
    private javax.swing.JLabel totalLineLB;
    private javax.swing.JLabel totalLineTitleLB;
    // End of variables declaration//GEN-END:variables
}
